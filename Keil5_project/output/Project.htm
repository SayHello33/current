<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Sun Jul  6 12:37:23 2025
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; INA226_ReadPower &rArr; INA226_ReadCurrent_mA &rArr; INA226_Read2Byte &rArr; I2C_ReadByte &rArr; I2C_Ack &rArr; gpio_init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC0_1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32f10x_it.o(.text.BusFault_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1e]">CAN0_RX0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1d]">CAN0_TX_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4a]">CAN1_EWMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[48]">CAN1_RX0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[49]">CAN1_RX1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[47]">CAN1_TX_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[40]">DMA1_Channel0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[41]">DMA1_Channel1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[42]">DMA1_Channel2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[43]">DMA1_Channel3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[44]">DMA1_Channel4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from gd32f10x_it.o(.text.DebugMon_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[45]">ENET_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[46]">ENET_WKUP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[39]">EXMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32f10x_it.o(.text.HardFault_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32f10x_it.o(.text.MemManage_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32f10x_it.o(.text.NMI_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from gd32f10x_it.o(.text.PendSV_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[f]">RCU_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from gd32f10x_it.o(.text.SVC_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from gd32f10x_it.o(.text.SysTick_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_gd32f10x.o(.text.SystemInit) referenced from startup_gd32f10x_cl.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[25]">TIMER0_Channel_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3a]">TIMER4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3e]">TIMER5_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3f]">TIMER6_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[38]">TIMER7_Channel_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3c]">UART3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4b]">USBFS_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[34]">USBFS_WKUP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32f10x_it.o(.text.UsageFault_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f10x_cl.o(.text)
 <LI><a href="#[50]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4f]">fputc</a> from main.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4c]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[51]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[67]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_value
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadCurrent_mA
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadCurrent_mA
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadPower
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadCurrent_mA
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadVoltage
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadPower
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadCurrent_mA
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadPower
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadVoltage
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_value
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadCurrent_mA
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[54]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[52]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ba]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[bb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[bc]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bd]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[60]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(.text.DebugMon_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C_Ack</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, i2c.o(.text.I2C_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Ack &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[6c]"></a>I2C_BusScan</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, i2c.o(.text.I2C_BusScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_BusScan &rArr; I2C_SendByte &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>I2C_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, i2c.o(.text.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>I2C_ReadByte</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, i2c.o(.text.I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_ReadByte &rArr; I2C_Ack &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Read2Byte
</UL>

<P><STRONG><a name="[6e]"></a>I2C_SendByte</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, i2c.o(.text.I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_SendByte &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusScan
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Write2Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Read2Byte
</UL>

<P><STRONG><a name="[75]"></a>I2C_Start</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, i2c.o(.text.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Start &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Write2Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Read2Byte
</UL>

<P><STRONG><a name="[76]"></a>I2C_Stop</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, i2c.o(.text.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Stop &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Write2Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Read2Byte
</UL>

<P><STRONG><a name="[77]"></a>INA226_Init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ina226.o(.text.INA226_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = INA226_Init &rArr; INA226_Read2Byte &rArr; I2C_ReadByte &rArr; I2C_Ack &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Write2Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Read2Byte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>INA226_Read2Byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ina226.o(.text.INA226_Read2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = INA226_Read2Byte &rArr; I2C_ReadByte &rArr; I2C_Ack &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadPower
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadCurrent_mA
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadVoltage
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Init
</UL>

<P><STRONG><a name="[7b]"></a>INA226_ReadCurrent_mA</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, ina226.o(.text.INA226_ReadCurrent_mA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = INA226_ReadCurrent_mA &rArr; INA226_Read2Byte &rArr; I2C_ReadByte &rArr; I2C_Ack &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Read2Byte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadPower
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>INA226_ReadPower</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ina226.o(.text.INA226_ReadPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = INA226_ReadPower &rArr; INA226_ReadCurrent_mA &rArr; INA226_Read2Byte &rArr; I2C_ReadByte &rArr; I2C_Ack &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadCurrent_mA
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Read2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>INA226_ReadVoltage</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ina226.o(.text.INA226_ReadVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = INA226_ReadVoltage &rArr; INA226_Read2Byte &rArr; I2C_ReadByte &rArr; I2C_Ack &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Read2Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>INA226_Write2Byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ina226.o(.text.INA226_Write2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = INA226_Write2Byte &rArr; I2C_SendByte &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(.text.PendSV_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(.text.SVC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gd32f10x_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; led_spark
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_spark
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, system_gd32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>delay_1ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systick.o(.text.delay_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadCurrent_mA
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_st7735s_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Write2Byte
</UL>

<P><STRONG><a name="[81]"></a>delay_decrement</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, systick.o(.text.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6f]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, systick.o(.text.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusScan
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_register
</UL>

<P><STRONG><a name="[93]"></a>exti_init</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, gd32f10x_exti.o(.text.exti_init))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
</UL>

<P><STRONG><a name="[94]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_exti.o(.text.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
</UL>

<P><STRONG><a name="[4f]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[a6]"></a>gd32f10x_firmware_version_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_gd32f10x.o(.text.gd32f10x_firmware_version_get))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>gd_eval_com_init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, gd32f10x_eval.o(.text.gd_eval_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gd_eval_com_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>gd_eval_key_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gd32f10x_eval.o(.text.gd_eval_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gd_eval_key_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>gd_eval_key_state_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f10x_eval.o(.text.gd_eval_key_state_get))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>gd_eval_led_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gd32f10x_eval.o(.text.gd_eval_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gd_eval_led_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>gd_eval_led_off</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_eval.o(.text.gd_eval_led_off))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_spark
</UL>

<P><STRONG><a name="[a3]"></a>gd_eval_led_on</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_eval.o(.text.gd_eval_led_on))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_spark
</UL>

<P><STRONG><a name="[97]"></a>gd_eval_led_toggle</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gd32f10x_eval.o(.text.gd_eval_led_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gd_eval_led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusScan
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_st7735s_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_register
</UL>

<P><STRONG><a name="[6b]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusScan
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_st7735s_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_register
</UL>

<P><STRONG><a name="[98]"></a>gpio_bit_write</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
</UL>

<P><STRONG><a name="[92]"></a>gpio_exti_source_select</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text.gpio_exti_source_select))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
</UL>

<P><STRONG><a name="[69]"></a>gpio_init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, gd32f10x_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusScan
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_st7735s_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[74]"></a>gpio_input_bit_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_state_get
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
</UL>

<P><STRONG><a name="[99]"></a>lcd_clear</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, st7735.o(.text.lcd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_clear &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>lcd_display_value</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, st7735.o(.text.lcd_display_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lcd_display_value &rArr; lcd_draw_char &rArr; lcd_set_address &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>lcd_draw_char</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, st7735.o(.text.lcd_draw_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcd_draw_char &rArr; lcd_set_address &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_address
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_value
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_string
</UL>

<P><STRONG><a name="[a1]"></a>lcd_draw_string</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, st7735.o(.text.lcd_draw_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lcd_draw_string &rArr; lcd_draw_char &rArr; lcd_set_address &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>lcd_set_address</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, st7735.o(.text.lcd_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_set_address &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
</UL>

<P><STRONG><a name="[a2]"></a>lcd_st7735s_init</STRONG> (Thumb, 556 bytes, Stack size 8 bytes, st7735.o(.text.lcd_st7735s_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_st7735s_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>lcd_write_data</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, st7735.o(.text.lcd_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_st7735s_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_char
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_address
</UL>

<P><STRONG><a name="[9a]"></a>lcd_write_register</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, st7735.o(.text.lcd_write_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_write_register
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_st7735s_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_address
</UL>

<P><STRONG><a name="[80]"></a>led_spark</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text.led_spark))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_spark
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_off
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 470 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = main &rArr; INA226_ReadPower &rArr; INA226_ReadCurrent_mA &rArr; INA226_Read2Byte &rArr; I2C_ReadByte &rArr; I2C_Ack &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_toggle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_state_get
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_value
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadPower
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadCurrent_mA
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadVoltage
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusScan
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd32f10x_firmware_version_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_string
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_st7735s_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_off
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_on
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[91]"></a>nvic_irq_enable</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, gd32f10x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
</UL>

<P><STRONG><a name="[82]"></a>nvic_vector_table_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a7]"></a>rcu_clock_freq_get</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, gd32f10x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[72]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_key_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_led_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_st7735s_init
</UL>

<P><STRONG><a name="[a9]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[a8]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f10x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[a5]"></a>systick_config</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, systick.o(.text.systick_config))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>usart_baudrate_set</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gd32f10x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[83]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[86]"></a>usart_deinit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, gd32f10x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[8f]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[84]"></a>usart_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8c]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text.usart_hardware_flow_cts_config))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[8b]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text.usart_hardware_flow_rts_config))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[8a]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[8d]"></a>usart_receive_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[89]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[8e]"></a>usart_transmit_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[88]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(.text.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_com_init
</UL>

<P><STRONG><a name="[aa]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[be]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[70]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadCurrent_mA
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusScan
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[c0]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ac]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c1]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[9e]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_value
</UL>

<P><STRONG><a name="[c2]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[c3]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[c4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6d]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadPower
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_ReadVoltage
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INA226_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusScan
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ad]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ab]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[b0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[af]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[50]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
